name: Build and publish a DazWilkin/crtsh-exporter image to ghcr.io
on:
  push:
    

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: "oguzhan-yilmaz/dazwilkin--crtsh-exporter"

jobs:
  build-and-push-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout DazWilkin/crtsh-exporter repository
        uses: actions/checkout@v3
        with:
          repository: 'DazWilkin/crtsh-exporter'

      - name: debug
        run: |
          ls -al

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      
      # - name: Install jq
      #   run: |
      #     sudo snap install jq

      - name: Extract metadata (tags, labels) for Docker
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images:  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
      
      # - name: Find Latest Steampipe Release
      #   id: latest_steampipe_release
      #   run: |
      #     STEAMPIPE_AMD64_URL=$(curl -s https://api.github.com/repos/turbot/steampipe/releases/latest | jq -r '.assets[] | select(.name == "steampipe_linux_amd64.tar.gz") | .browser_download_url')
      #     echo "STEAMPIPE_AMD64_URL=$STEAMPIPE_AMD64_URL"
      #     echo "download_url=$STEAMPIPE_AMD64_URL" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}

      # - name: Find Latest Powerpipe Release
      #   id: latest_powerpipe_release
      #   run: |
      #     POWERPIPE_AMD64_URL=$(curl -s https://api.github.com/repos/turbot/powerpipe/releases/latest | jq -r '.assets[] | select(.name == "powerpipe.linux.amd64.tar.gz") | .browser_download_url')
      #     echo "POWERPIPE_AMD64_URL=$POWERPIPE_AMD64_URL"
      #     echo "download_url=$POWERPIPE_AMD64_URL" >> $GITHUB_OUTPUT

      # - name: Extract metadata (tags, labels) for Docker
      #   id: powerpipemeta
      #   uses: docker/metadata-action@v4
      #   with:
      #     images:  ${{ env.REGISTRY }}/${{ env.POWERPIPE_IMAGE_NAME }}
      #     tags: |
      #       type=semver,pattern={{version}}
      #       type=ref,event=branch
            
      # - name: Build and push Docker image -- powerpipe
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: ./powerpipe
      #     push: true
      #     tags: ${{ steps.powerpipemeta.outputs.tags }}
      #     labels: ${{ steps.powerpipemeta.outputs.labels }}
      #     file: ./powerpipe/Dockerfile
      #     build-args: POWERPIPE_BINARY_DOWNLOAD_URL=${{ steps.latest_powerpipe_release.outputs.download_url}}